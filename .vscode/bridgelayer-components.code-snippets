// Component Library Snippets for React/Next.js
{
  "Button Component": {
    "prefix": "btn",
    "body": [
      "interface ButtonProps {",
      "  children: React.ReactNode",
      "  variant?: 'primary' | 'secondary' | 'outline'",
      "  size?: 'sm' | 'md' | 'lg'",
      "  onClick?: () => void",
      "  disabled?: boolean",
      "}",
      "",
      "export function Button({ children, variant = 'primary', size = 'md', onClick, disabled }: ButtonProps) {",
      "  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none'",
      "  ",
      "  const variants = {",
      "    primary: 'bg-primary text-primary-foreground hover:bg-primary/90',",
      "    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',",
      "    outline: 'border border-input hover:bg-accent hover:text-accent-foreground'",
      "  }",
      "  ",
      "  const sizes = {",
      "    sm: 'h-9 px-3 text-xs',",
      "    md: 'h-10 px-4 py-2',",
      "    lg: 'h-11 px-8 text-base'",
      "  }",
      "  ",
      "  return (",
      "    <button",
      "      className={`${baseClasses} ${variants[variant]} ${sizes[size]}`}",
      "      onClick={onClick}",
      "      disabled={disabled}",
      "    >",
      "      {children}",
      "    </button>",
      "  )",
      "}"
    ],
    "description": "Create a reusable Button component with variants"
  },
  
  "Card Component": {
    "prefix": "card",
    "body": [
      "interface CardProps {",
      "  children: React.ReactNode",
      "  className?: string",
      "}",
      "",
      "export function Card({ children, className = '' }: CardProps) {",
      "  return (",
      "    <div className={`rounded-lg border bg-card text-card-foreground shadow-sm ${className}`}>",
      "      {children}",
      "    </div>",
      "  )",
      "}",
      "",
      "export function CardHeader({ children, className = '' }: CardProps) {",
      "  return (",
      "    <div className={`flex flex-col space-y-1.5 p-6 ${className}`}>",
      "      {children}",
      "    </div>",
      "  )",
      "}",
      "",
      "export function CardTitle({ children, className = '' }: CardProps) {",
      "  return (",
      "    <h3 className={`text-2xl font-semibold leading-none tracking-tight ${className}`}>",
      "      {children}",
      "    </h3>",
      "  )",
      "}",
      "",
      "export function CardContent({ children, className = '' }: CardProps) {",
      "  return (",
      "    <div className={`p-6 pt-0 ${className}`}>",
      "      {children}",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a reusable Card component with header, title, and content"
  },
  
  "Input Component": {
    "prefix": "input",
    "body": [
      "interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {",
      "  label?: string",
      "  error?: string",
      "}",
      "",
      "export function Input({ label, error, className = '', ...props }: InputProps) {",
      "  return (",
      "    <div className=\"grid w-full max-w-sm items-center gap-1.5\">",
      "      {label && (",
      "        <label className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">",
      "          {label}",
      "        </label>",
      "      )}",
      "      <input",
      "        className={`flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${error ? 'border-red-500' : ''} ${className}`}",
      "        {...props}",
      "      />",
      "      {error && (",
      "        <p className=\"text-sm text-red-500\">{error}</p>",
      "      )}",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a reusable Input component with label and error state"
  },
  
  "Modal Component": {
    "prefix": "modal",
    "body": [
      "interface ModalProps {",
      "  isOpen: boolean",
      "  onClose: () => void",
      "  title: string",
      "  children: React.ReactNode",
      "}",
      "",
      "export function Modal({ isOpen, onClose, title, children }: ModalProps) {",
      "  if (!isOpen) return null",
      "  ",
      "  return (",
      "    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">",
      "      <div className=\"fixed inset-0 bg-black/50\" onClick={onClose} />",
      "      <div className=\"relative bg-white rounded-lg shadow-lg max-w-md w-full mx-4\">",
      "        <div className=\"flex items-center justify-between p-6 border-b\">",
      "          <h2 className=\"text-lg font-semibold\">{title}</h2>",
      "          <button",
      "            onClick={onClose}",
      "            className=\"text-gray-400 hover:text-gray-600\"",
      "          >",
      "            âœ•",
      "          </button>",
      "        </div>",
      "        <div className=\"p-6\">",
      "          {children}",
      "        </div>",
      "      </div>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a reusable Modal component"
  },
  
  "Loading Spinner": {
    "prefix": "spinner",
    "body": [
      "interface SpinnerProps {",
      "  size?: 'sm' | 'md' | 'lg'",
      "  className?: string",
      "}",
      "",
      "export function Spinner({ size = 'md', className = '' }: SpinnerProps) {",
      "  const sizes = {",
      "    sm: 'h-4 w-4',",
      "    md: 'h-6 w-6',",
      "    lg: 'h-8 w-8'",
      "  }",
      "  ",
      "  return (",
      "    <div className={`animate-spin rounded-full border-2 border-current border-t-transparent ${sizes[size]} ${className}`}>",
      "      <span className=\"sr-only\">Loading...</span>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "Create a reusable Loading Spinner component"
  },
  
  "Mock Data Hook": {
    "prefix": "usemock",
    "body": [
      "import { useState, useEffect } from 'react'",
      "",
      "export function useMockData<T>(mockData: T, delay: number = 1000): { data: T | null; loading: boolean; error: string | null } {",
      "  const [data, setData] = useState<T | null>(null)",
      "  const [loading, setLoading] = useState(true)",
      "  const [error, setError] = useState<string | null>(null)",
      "  ",
      "  useEffect(() => {",
      "    const timer = setTimeout(() => {",
      "      try {",
      "        setData(mockData)",
      "        setLoading(false)",
      "      } catch (err) {",
      "        setError('Failed to load mock data')",
      "        setLoading(false)",
      "      }",
      "    }, delay)",
      "    ",
      "    return () => clearTimeout(timer)",
      "  }, [mockData, delay])",
      "  ",
      "  return { data, loading, error }",
      "}"
    ],
    "description": "Create a hook for mocking API data with loading states"
  },
  
  "Preview Config Hook": {
    "prefix": "usepreview",
    "body": [
      "import { useState } from 'react'",
      "",
      "interface PreviewConfig {",
      "  theme: 'light' | 'dark'",
      "  mockData: boolean",
      "  debugMode: boolean",
      "}",
      "",
      "export function usePreviewConfig(): [PreviewConfig, (config: Partial<PreviewConfig>) => void] {",
      "  const [config, setConfig] = useState<PreviewConfig>({",
      "    theme: 'light',",
      "    mockData: true,",
      "    debugMode: false",
      "  })",
      "  ",
      "  const updateConfig = (newConfig: Partial<PreviewConfig>) => {",
      "    setConfig(prev => ({ ...prev, ...newConfig }))",
      "  }",
      "  ",
      "  return [config, updateConfig]",
      "}"
    ],
    "description": "Create a hook for preview configuration management"
  }
}
